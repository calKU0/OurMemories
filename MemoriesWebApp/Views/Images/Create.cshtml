@model MemoriesWebApp.ViewModels.CreateImageViewModel

@{
    ViewData["Title"] = "dodawanie zdjęcia";
}

<form id="createForm" method="post" class="needs-validation novalidate" asp-action="Create" enctype="multipart/form-data">
    <div class="form-group row">
        <label asp-for="Name" class="col-sm-2 col-form-label">Nazwa</label>
        <div class="col-sm-10">
            <input asp-for="Name" type="text" class="form-control" id="Name" placeholder="Nazwa">
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="Description" class="col-sm-2 col-form-label">Opis</label>
        <div class="col-sm-10">
            <input asp-for="Description" type="text" class="form-control" id="Description" placeholder="Opis">
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="City" class="col-sm-2 col-form-label">Miejsce</label>
        <div class="col-sm-10">
            <input asp-for="City" type="text" class="form-control" id="City" placeholder="Miejsce">
            <span asp-validation-for="City" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="Date" class="col-sm-2 col-form-label">Data</label>
        <div class="col-sm-10">
            <input asp-for="Date" type="date" class="form-control" id="Date" placeholder="Data">
        </div>
    </div>
    <div class="form-group row pt-3">
        <label class="col-sm-2 col-form-label">Wybierz spotkanie</label>
        <div class="col-sm-10">
            <button id="showMeetingsButton" type="button" class="btn btn-outline-primary" onclick="toggleImages()">Pokaż spotkania</button>
            <div id="imageSelection" class="row mt-3 image-selection" style="overflow: hidden; max-height: 0;">
                @foreach (var meeting in ViewBag.Meetings)
                {
                    <div class="col-sm-3 mb-3">
                    <img src="@meeting.ImageUrl" class="img-thumbnail selectable-meeting" style="cursor: pointer;" onclick="selectMeeting('@meeting.Id', '@meeting.ImageUrl')">
                        <div class="row">
                            <div class="col text-left">
                                <strong>@meeting.MeetingCity</strong>
                            </div>
                            <div class="col text-end">@meeting.DateStart.ToString("dd/MM/yyyy")</div>
                        </div>
                    </div>
                }
            </div>
            <input type="hidden" id="selectedMeetingId" name="MeetingId" value="" />
        </div>
    </div>
    <div class="form-group row pt-3 form-check">
        <label asp-for="IsVisableForUser" class="form-check-label">
            <div class="col-sm-10">
                <input class="form-check-input" asp-for="IsVisableForUser" /> Czy widoczne dla użytkownika
                <span asp-validation-for="IsVisableForUser" class="text-danger"></span>
            </div>
        </label>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="Image" class="col-sm-2 col-form-label">Zdjęcie</label>
        <div class="col-sm-10">
            <input asp-for="Image" type="file" class="form-control" id="Image">
        </div>
    </div>
    <div class="form-group row pt-3">
        <img id="imagePreview" style="display:none; max-height: 550px; width: auto;">
        <div class="col-sm-10">
            <form>
                <input type="button" value="Powrót" class="btn btn-outline-secondary" onclick="history.back()">
            </form>
            <a id="save" class="btn btn-primary">Dodaj</a>
        </div>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        function toggleImages() {
            var imageSelection = document.getElementById("imageSelection");
            var showMeetingsButton = document.getElementById("showMeetingsButton");

            if (imageSelection.style.maxHeight === "0px" || imageSelection.style.maxHeight === "") {
                // Show meetings
                imageSelection.style.maxHeight = imageSelection.scrollHeight + "px";
                showMeetingsButton.textContent = "Ukryj spotkania";
                showMeetingsButton.classList.remove('btn-outline-primary');
                showMeetingsButton.classList.add('btn-primary');
            } else {
                // Hide meetings
                imageSelection.style.maxHeight = "0px";
                showMeetingsButton.textContent = "Pokaż spotkania";
                showMeetingsButton.classList.remove('btn-primary');
                showMeetingsButton.classList.add('btn-outline-primary');
            }
        }


        function selectMeeting(meetingId, imageUrl) {
            document.getElementById("selectedMeetingId").value = meetingId;

            var meetings = document.querySelectorAll('.selectable-meeting');
            meetings.forEach(function (meeting) {
                meeting.classList.remove('selected-meeting');
            });

            event.target.classList.add('selected-meeting');
        }

        document.head.insertAdjacentHTML('beforeend', `
                                    <style>
                                        .selected-meeting {
                                            border: 2px solid #007bff;
                                        }
                                    </style>
                                `);
        let cropper;
        let croppedBlob;

        document.getElementById('Image').addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.getElementById('imagePreview');
                    img.src = e.target.result;
                    img.style.display = 'block';

                    if (cropper) {
                        cropper.destroy();
                    }

                    cropper = new Cropper(img, {
                        viewMode: 1,
                        cropBoxResizable: false,
                        cropBoxMovable: true,
                        dragMode: 'move',
                        ready: function () {
                            const containerData = cropper.getContainerData();
                            const aspectRatio = cropper.options.aspectRatio;

                            cropper.setCropBoxData({
                                width: cropBoxWidth,
                                height: cropBoxHeight
                            });
                        }
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('save').addEventListener('click', async function () {
            if (cropper) {
                const canvas = cropper.getCroppedCanvas({
                    width: 1280,
                    height: 720
                });
                canvas.toBlob(async function (blob) {
                    croppedBlob = blob;
                    const fileInput = document.getElementById('Image');
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(new File([croppedBlob], fileInput.files[0].name, { type: fileInput.files[0].type }));
                    fileInput.files = dataTransfer.files;

                    $('#createForm').submit();
                });
            } else {
                $('#createForm').submit();
            }
        });
    </script>
}
