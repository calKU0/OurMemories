@model MemoriesWebApp.ViewModels.CreateImageViewModel

@{
    ViewData["Title"] = "Create";
}

<form id="createForm" method="post" class="needs-validation novalidate" asp-action="Create" enctype="multipart/form-data">
    <div class="form-group row">
        <label asp-for="Name" class="col-sm-2 col-form-label">Nazwa</label>
        <div class="col-sm-10">
            <input asp-for="Name" type="Name" class="form-control" id="Name" placeholder="Nazwa">
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="Description" class="col-sm-2 col-form-label">Opis</label>
        <div class="col-sm-10">
            <input asp-for="Description" type="Description" class="form-control" id="Description" placeholder="Opis">
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="City" class="col-sm-2 col-form-label">Miejsce</label>
        <div class="col-sm-10">
            <input asp-for="City" type="City" class="form-control" id="City" placeholder="Miejsce">
            <span asp-validation-for="City" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="Date" class="col-sm-2 col-form-label">Data</label>
        <div class="col-sm-10">
            <input asp-for="Date" type="Date" class="form-control" id="Date" placeholder="Data">
        </div>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="MeetingId" class="col-sm-2 col-form-label">Numer spotkania</label>
        <div class="col-sm-10">
            <select asp-for="MeetingId" class="form-control" id="MeetingId" asp-items="ViewBag.MeetingId"></select>
        </div>
    </div>
    <div class="form-group row pt-3 form-check">
        <label asp-for="IsVisableForUser" class="form-check-label">
            <div class="col-sm-10">
                <input class="form-check-input" asp-for="IsVisableForUser" /> Czy widoczne dla użytkownika
                <span asp-validation-for="IsVisableForUser" class="text-danger"></span>
            </div>
        </label>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="Image" class="col-sm-2 col-form-label">Zdjęcie</label>
        <div class="col-sm-10">
            <input asp-for="Image" type="file" class="form-control" id="Image">
        </div>
    </div>
    <div class="form-group row pt-3">
        <img id="imagePreview" style="display:none; max-height: 550px; width: auto;">
        <form>
            <input type="button" value="Powrót" class="btn btn-outline-secondary" onclick="history.back()">
        </form>
        <div class="col-sm-10">
            <a id="save" class="btn btn-primary">Dodaj</a>
        </div>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        let cropper;
        let croppedBlob;

        document.getElementById('Image').addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.getElementById('imagePreview');
                    img.src = e.target.result;
                    img.style.display = 'block';

                    if (cropper) {
                        cropper.destroy();
                    }

                    cropper = new Cropper(img, {
                        viewMode: 1,
                        aspectRatio: 800 / 450,
                        cropBoxResizable: false,
                        cropBoxMovable: true,
                        dragMode: 'move',
                        ready: function () {
                            const containerData = cropper.getContainerData();
                            const aspectRatio = cropper.options.aspectRatio;

                            let cropBoxWidth = 800;
                            let cropBoxHeight = 450;


                            cropper.setCropBoxData({
                                width: cropBoxWidth,
                                height: cropBoxHeight
                            });
                        }
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('save').addEventListener('click', async function () {
            if (cropper) {
                const canvas = cropper.getCroppedCanvas({
                    width: 800,
                    height: 450
                });
                canvas.toBlob(async function (blob) {
                    croppedBlob = blob;
                    const fileInput = document.getElementById('Image');
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(new File([croppedBlob], fileInput.files[0].name, { type: fileInput.files[0].type }));
                    fileInput.files = dataTransfer.files;

                    $('#createForm').submit();
                });
            } else {
                $('#createForm').submit();
            }
        });
    </script>
}
