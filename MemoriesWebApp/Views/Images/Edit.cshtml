@model MemoriesWebApp.ViewModels.EditImageViewModel

@functions {
    public static string ToRoman(int number)
    {
        if (number < 1) return string.Empty;
        if (number >= 1000) return "M" + ToRoman(number - 1000);
        if (number >= 900) return "CM" + ToRoman(number - 900);
        if (number >= 500) return "D" + ToRoman(number - 500);
        if (number >= 400) return "CD" + ToRoman(number - 400);
        if (number >= 100) return "C" + ToRoman(number - 100);
        if (number >= 90) return "XC" + ToRoman(number - 90);
        if (number >= 50) return "L" + ToRoman(number - 50);
        if (number >= 40) return "XL" + ToRoman(number - 40);
        if (number >= 10) return "X" + ToRoman(number - 10);
        if (number >= 9) return "IX" + ToRoman(number - 9);
        if (number >= 5) return "V" + ToRoman(number - 5);
        if (number >= 4) return "IV" + ToRoman(number - 4);
        if (number >= 1) return "I" + ToRoman(number - 1);
        else return "";
    }
}

@{
    ViewData["Title"] = "Edit";
    int i = 1;
}

<!-- Modal for confirmation saving -->
<div class="modal fade" id="saveModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="saveModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="deleteModalLabel">Czy napewno chcesz zapisać zmiany?</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row align-items-center justify-content-center p-2">
                    <div class="col-auto">
                        <svg class="bi mt-2 mb-2" style="color: green" width="50" height="50">
                            <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-check-circle" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                <path d="m10.97 4.97-.02.022-3.473 4.425-2.093-2.094a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05" />
                            </svg>
                        </svg>
                    </div>
                </div>
                <div class="row align-items-center p-2">
                    <p id="deleteMessage">Zapisanie zmian spowoduje <strong style="color:green">nieodwracalne</strong> nadpisanie istniejących informacji o spotkaniu</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Zamknij</button>
                <button id="confirmSaveButton" type="button" class="btn btn-success">Zapisz</button>
            </div>
        </div>
    </div>
</div>

<form id="editForm" method="post" class="needs-validation novalidate" asp-action="Edit" enctype="multipart/form-data">
    <div class="form-group row pt-3">
        <label asp-for="Name" class="col-sm-2 col-form-label">Nazwa zdjęcia</label>
        <div class="col-sm-10">
            <input asp-for="Name" class="form-control" id="Name" placeholder="Nazwa zdjęcia">
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="Description" class="col-sm-2 col-form-label">Opis zdjęcia</label>
        <div class="col-sm-10">
            <input asp-for="Description" class="form-control" id="Description" placeholder="Opis zdjęcia">
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="Date" class="col-sm-2 col-form-label">Data</label>
        <div class="col-sm-10">
            <input asp-for="Date" type="Date" class="form-control" id="Date" placeholder="Data">
            <span asp-validation-for="Date" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="City" class="col-sm-2 col-form-label">Miejscowość</label>
        <div class="col-sm-10">
            <input asp-for="City" class="form-control" id="DateEnd" placeholder="Miejscowość">
            <span asp-validation-for="City" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row pt-3">
        <label class="col-sm-2 col-form-label">Wybierz spotkanie</label>
        <div class="col-sm-10">
            <button id="showMeetingsButton" type="button" class="btn btn-outline-primary" onclick="toggleImages()">Pokaż spotkania</button>
            <div id="imageSelection" class="row mt-3 image-selection" style="overflow: hidden; max-height: 0;">
                
                @foreach (var meeting in ViewBag.Meetings)
                {
                    <div class="col-sm-3 mb-3">
                        <img src="@meeting.ImageUrl" class="img-thumbnail selectable-meeting" style="cursor: pointer;" onclick="selectMeeting('@meeting.Id', '@meeting.ImageUrl')">
                        <div class="row">
                            <div class="col text-left">
                                <strong>
                                    @ToRoman(i). @meeting.MeetingCity
                                </strong>
                            </div>
                            <div class="col text-end">@meeting.DateStart.ToString("dd/MM/yyyy")</div>
                        </div>
                    </div>
                    i++;
                }
            </div>
            <input type="hidden" id="selectedMeetingId" name="MeetingId" value="" />
        </div>
    </div>
    <div class="form-group row pt-3 form-check">
        <label asp-for="IsVisableForUser" class="form-check-label">
            <div class="col-sm-10">
                <input class="form-check-input" asp-for="IsVisableForUser" /> Czy widoczne dla użytkownika
                <span asp-validation-for="IsVisableForUser" class="text-danger"></span>
            </div>
        </label>
    </div>
    <div class="form-group row pt-3">
        <label asp-for="Image" class="col-sm-2 col-form-label">Zdjęcie</label>
        <div class="col-sm-10">
            <input asp-for="Url" class="form-control" id="Url" type="hidden">
            <input asp-for="Image" type="file" class="form-control" id="Image">
        </div>
    </div>
    <div class="form-group row pt-3"> 
        <img id="imagePreview" style="display:none; max-height: 550px; width: auto;">
        <div class="col-sm-10 mt-3">
            <form>
                <input type="button" value="Powrót" class="btn btn-outline-secondary" onclick="history.back()">
            </form>
            <a id="openSaveModalButton" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#saveModal">Zapisz</a>
        </div>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        function toggleImages() {
            var imageSelection = document.getElementById("imageSelection");
            var showMeetingsButton = document.getElementById("showMeetingsButton");

            if (imageSelection.style.maxHeight === "0px" || imageSelection.style.maxHeight === "") {
                // Show meetings
                imageSelection.style.maxHeight = imageSelection.scrollHeight + "px";
                showMeetingsButton.textContent = "Ukryj spotkania";
                showMeetingsButton.classList.remove('btn-outline-primary');
                showMeetingsButton.classList.add('btn-primary');
            } else {
                // Hide meetings
                imageSelection.style.maxHeight = "0px";
                showMeetingsButton.textContent = "Pokaż spotkania";
                showMeetingsButton.classList.remove('btn-primary');
                showMeetingsButton.classList.add('btn-outline-primary');
            }
        }


        function selectMeeting(meetingId, imageUrl) {
            document.getElementById("selectedMeetingId").value = meetingId;

            var meetings = document.querySelectorAll('.selectable-meeting');
            meetings.forEach(function (meeting) {
                meeting.classList.remove('selected-meeting');
            });

            event.target.classList.add('selected-meeting');
        }

        document.head.insertAdjacentHTML('beforeend', `
                                            <style>
                                                .selected-meeting {
                                                    border: 2px solid #007bff;
                                                }
                                            </style>
                                        `);

        let cropper;
        let croppedBlob;

        document.getElementById('Image').addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.getElementById('imagePreview');
                    img.src = e.target.result;
                    img.style.display = 'block';

                    if (cropper) {
                        cropper.destroy();
                    }

                    cropper = new Cropper(img, {
                        viewMode: 1,
                        aspectRatio: 1280 / 720,
                        cropBoxResizable: false, 
                        cropBoxMovable: true, 
                        dragMode: 'move', 
                        ready: function () {
                            const containerData = cropper.getContainerData();
                            const aspectRatio = cropper.options.aspectRatio;

                            let cropBoxWidth = 1280;
                            let cropBoxHeight = 720;


                            cropper.setCropBoxData({
                                width: cropBoxWidth,
                                height: cropBoxHeight
                            });
                        }
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('confirmSaveButton').addEventListener('click', async function () {
            if (cropper) {
                const canvas = cropper.getCroppedCanvas({
                    width: 1280,
                    height: 720
                });
                canvas.toBlob(async function (blob) {
                    croppedBlob = blob;
                    const fileInput = document.getElementById('Image');
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(new File([croppedBlob], fileInput.files[0].name, { type: fileInput.files[0].type }));
                    fileInput.files = dataTransfer.files;

                    $('#editForm').submit();
                });
            } else {
                $('#editForm').submit();
            }
        });
    </script>
}
